apply plugin: 'jacoco'

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        resultsDir = "${project.buildDir}/test-results"
    }
}
spoon {
    grantAllPermissions = true
    codeCoverage = true
}
ext {
    fileFilter = ['**/R.class',
                  '**/R$*.class',
                  '**/BuildConfig.*',
                  '**/Manifest*.*',
                  'android/**/*.*',
                  'com/google/**/*.*',
                  'com/j256/ormlite/**/*.*',
                  'io/reactivex/**/*.*',
                  'okhttp3/**/*.*',
                  'retrofit2/**/*.*',
                  '**/*$ViewInjector*.*',
                  '**/*$ViewBinder*.*',
                  '**/Lambda$*.class', //Retrolambda
                  '**/Lambda.class',
                  '**/*Lambda.class',
                  '**/*Lambda*.class',
                  '**/*Lambda*.*',
                  '**/*Builder.*',
                  '**/*$MembersInjector*.*',
                  '**/*_MembersInjector.class',  //Dagger2 generated code
                  '**/*_MembersInjector*.*',  //Dagger2 generated code
                  '**/*_*Factory*.*', //Dagger2 generated code
                  '**/*Component*.*', //Dagger2 generated code
                  '**/*Module*.*' //Dagger2 generated code
    ]
}

jacoco {
    toolVersion = "0.7.9"
    reportsDir = file("$buildDir/jacoco/test.exec")
}

task jacocoTestReport(type: JacocoReport, dependsOn: ["testDebugUnitTest", "spoon"]) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.projectDir, includes:
            ['**/*.exec', '**/*.ec'])
    doLast {
        recursiveCopy("${project.buildDir}/test-results")
        recursiveCopy("${project.buildDir}/spoon")
        normalizeName("${project.buildDir}/test-results")
    }
}

// Necessário pois o relatório criado pelo Spoon sobre a execução dos testes instrumentados
// não é gerado no padrão Surefire, necessário para que o Sonar consiga entender
def normalizeName(directory) {
    new File(directory).eachFile { File file ->
        if (!"${file.name}".startsWith("TEST-") && !file.isDirectory()) {
            file.renameTo("${file.parentFile.path}/TEST-${file.name}")
        }
    }
}

// Needed because somehow the wildcards for the Copy task was not working
def recursiveCopy(directory) {
    copy {
        from "${directory}"
        into "${project.buildDir}/test-results/"
        include '*.xml'
    }
    new File("${directory}").eachDir {
        recursiveCopy("${it}")
    }
}
